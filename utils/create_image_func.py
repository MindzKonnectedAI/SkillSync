from IPython.display import Image, display
import os

def create_graph_image(chain, image_name="graph_image", folder_path="images"):
    """
    Saves and displays an image generated by the chain's graph in a specified folder.

    Args:
        chain: The chain object with the graph generation capability.
        image_name (str): The base name for the image file without extension.
                          Default is 'graph_image'.
        folder_path (str): The directory path where the image should be saved.
                           Default is 'images'.
    """
    # Ensure the folder exists
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    
    # Create a dynamic file path with the specified folder and name
    image_path = os.path.join(folder_path, f"{image_name}.png")
    
    try:
        # Assuming `draw_mermaid_png()` returns binary image data
        graph_image_data = chain.get_graph(xray=True).draw_mermaid_png()

        # Save the image data to a file
        with open(image_path, "wb") as file:
            file.write(graph_image_data)

        # Display the saved image
        display(Image(filename=image_path))

        print(f"Image saved and displayed: {image_path}")

    except AttributeError as e:
        print(f"Error: The chain object does not have the required methods. {e}")

    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage of the function
# Replace `YourChainClass` with the actual class or object you're working with
# display_graph_image(chain, image_name="dynamic_image_name", folder_path="your_folder_path")
